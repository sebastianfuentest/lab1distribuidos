// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type Orden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Producto    string `protobuf:"bytes,2,opt,name=producto,proto3" json:"producto,omitempty"`
	Valor       string `protobuf:"bytes,3,opt,name=valor,proto3" json:"valor,omitempty"`
	Tienda      string `protobuf:"bytes,4,opt,name=tienda,proto3" json:"tienda,omitempty"`
	Destino     string `protobuf:"bytes,5,opt,name=destino,proto3" json:"destino,omitempty"`
	Prioritario string `protobuf:"bytes,6,opt,name=prioritario,proto3" json:"prioritario,omitempty"`
}

func (x *Orden) Reset() {
	*x = Orden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Orden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orden) ProtoMessage() {}

func (x *Orden) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orden.ProtoReflect.Descriptor instead.
func (*Orden) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *Orden) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Orden) GetProducto() string {
	if x != nil {
		return x.Producto
	}
	return ""
}

func (x *Orden) GetValor() string {
	if x != nil {
		return x.Valor
	}
	return ""
}

func (x *Orden) GetTienda() string {
	if x != nil {
		return x.Tienda
	}
	return ""
}

func (x *Orden) GetDestino() string {
	if x != nil {
		return x.Destino
	}
	return ""
}

func (x *Orden) GetPrioritario() string {
	if x != nil {
		return x.Prioritario
	}
	return ""
}

type MPaquete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Seguimiento string `protobuf:"bytes,2,opt,name=seguimiento,proto3" json:"seguimiento,omitempty"`
	Tipo        string `protobuf:"bytes,3,opt,name=tipo,proto3" json:"tipo,omitempty"`
	Valor       string `protobuf:"bytes,4,opt,name=valor,proto3" json:"valor,omitempty"`
	Intentos    int32  `protobuf:"varint,5,opt,name=intentos,proto3" json:"intentos,omitempty"`
	Estado      string `protobuf:"bytes,6,opt,name=estado,proto3" json:"estado,omitempty"`
}

func (x *MPaquete) Reset() {
	*x = MPaquete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPaquete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPaquete) ProtoMessage() {}

func (x *MPaquete) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPaquete.ProtoReflect.Descriptor instead.
func (*MPaquete) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *MPaquete) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MPaquete) GetSeguimiento() string {
	if x != nil {
		return x.Seguimiento
	}
	return ""
}

func (x *MPaquete) GetTipo() string {
	if x != nil {
		return x.Tipo
	}
	return ""
}

func (x *MPaquete) GetValor() string {
	if x != nil {
		return x.Valor
	}
	return ""
}

func (x *MPaquete) GetIntentos() int32 {
	if x != nil {
		return x.Intentos
	}
	return 0
}

func (x *MPaquete) GetEstado() string {
	if x != nil {
		return x.Estado
	}
	return ""
}

type NuevoEstado struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seguimiento string `protobuf:"bytes,1,opt,name=seguimiento,proto3" json:"seguimiento,omitempty"`
	Nuevoestado string `protobuf:"bytes,2,opt,name=nuevoestado,proto3" json:"nuevoestado,omitempty"`
	Intentos    int32  `protobuf:"varint,3,opt,name=intentos,proto3" json:"intentos,omitempty"`
}

func (x *NuevoEstado) Reset() {
	*x = NuevoEstado{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NuevoEstado) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NuevoEstado) ProtoMessage() {}

func (x *NuevoEstado) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NuevoEstado.ProtoReflect.Descriptor instead.
func (*NuevoEstado) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *NuevoEstado) GetSeguimiento() string {
	if x != nil {
		return x.Seguimiento
	}
	return ""
}

func (x *NuevoEstado) GetNuevoestado() string {
	if x != nil {
		return x.Nuevoestado
	}
	return ""
}

func (x *NuevoEstado) GetIntentos() int32 {
	if x != nil {
		return x.Intentos
	}
	return 0
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x22, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x72, 0x69,
	0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x4d, 0x50, 0x61, 0x71, 0x75, 0x65, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x70, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x22, 0x6d,
	0x0a, 0x0b, 0x4e, 0x75, 0x65, 0x76, 0x6f, 0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x65, 0x76, 0x6f, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x75, 0x65, 0x76, 0x6f, 0x65, 0x73, 0x74, 0x61, 0x64,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x32, 0xbc, 0x02,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x6e, 0x61, 0x72, 0x50, 0x79, 0x6d, 0x65, 0x12, 0x0b, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x6e, 0x61, 0x72, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x69, 0x62, 0x69, 0x72, 0x50, 0x61, 0x71, 0x75, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x4d, 0x50, 0x61, 0x71, 0x75, 0x65, 0x74, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x12,
	0x53, 0x65, 0x67, 0x75, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x50, 0x61, 0x71, 0x75, 0x65,
	0x74, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x61, 0x6d, 0x62, 0x69, 0x61, 0x72, 0x45, 0x73, 0x74,
	0x61, 0x64, 0x6f, 0x12, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4e, 0x75, 0x65, 0x76, 0x6f,
	0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x61, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x7a, 0x61, 0x73, 0x12, 0x0d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chat_proto_goTypes = []interface{}{
	(*Message)(nil),     // 0: chat.Message
	(*Orden)(nil),       // 1: chat.Orden
	(*MPaquete)(nil),    // 2: chat.MPaquete
	(*NuevoEstado)(nil), // 3: chat.NuevoEstado
}
var file_chat_proto_depIdxs = []int32{
	1, // 0: chat.ChatService.OrdenarPyme:input_type -> chat.Orden
	1, // 1: chat.ChatService.OrdenarRetail:input_type -> chat.Orden
	0, // 2: chat.ChatService.RecibirPaquete:input_type -> chat.Message
	0, // 3: chat.ChatService.SeguimientoPaquete:input_type -> chat.Message
	3, // 4: chat.ChatService.CambiarEstado:input_type -> chat.NuevoEstado
	0, // 5: chat.ChatService.ConsultarFinanzas:input_type -> chat.Message
	0, // 6: chat.ChatService.OrdenarPyme:output_type -> chat.Message
	0, // 7: chat.ChatService.OrdenarRetail:output_type -> chat.Message
	2, // 8: chat.ChatService.RecibirPaquete:output_type -> chat.MPaquete
	0, // 9: chat.ChatService.SeguimientoPaquete:output_type -> chat.Message
	0, // 10: chat.ChatService.CambiarEstado:output_type -> chat.Message
	0, // 11: chat.ChatService.ConsultarFinanzas:output_type -> chat.Message
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Orden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPaquete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NuevoEstado); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	OrdenarPyme(ctx context.Context, in *Orden, opts ...grpc.CallOption) (*Message, error)
	OrdenarRetail(ctx context.Context, in *Orden, opts ...grpc.CallOption) (*Message, error)
	RecibirPaquete(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MPaquete, error)
	SeguimientoPaquete(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	CambiarEstado(ctx context.Context, in *NuevoEstado, opts ...grpc.CallOption) (*Message, error)
	ConsultarFinanzas(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) OrdenarPyme(ctx context.Context, in *Orden, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/OrdenarPyme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) OrdenarRetail(ctx context.Context, in *Orden, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/OrdenarRetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RecibirPaquete(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MPaquete, error) {
	out := new(MPaquete)
	err := c.cc.Invoke(ctx, "/chat.ChatService/RecibirPaquete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SeguimientoPaquete(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/SeguimientoPaquete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CambiarEstado(ctx context.Context, in *NuevoEstado, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/CambiarEstado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ConsultarFinanzas(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/ConsultarFinanzas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	OrdenarPyme(context.Context, *Orden) (*Message, error)
	OrdenarRetail(context.Context, *Orden) (*Message, error)
	RecibirPaquete(context.Context, *Message) (*MPaquete, error)
	SeguimientoPaquete(context.Context, *Message) (*Message, error)
	CambiarEstado(context.Context, *NuevoEstado) (*Message, error)
	ConsultarFinanzas(context.Context, *Message) (*Message, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) OrdenarPyme(context.Context, *Orden) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdenarPyme not implemented")
}
func (*UnimplementedChatServiceServer) OrdenarRetail(context.Context, *Orden) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdenarRetail not implemented")
}
func (*UnimplementedChatServiceServer) RecibirPaquete(context.Context, *Message) (*MPaquete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecibirPaquete not implemented")
}
func (*UnimplementedChatServiceServer) SeguimientoPaquete(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeguimientoPaquete not implemented")
}
func (*UnimplementedChatServiceServer) CambiarEstado(context.Context, *NuevoEstado) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CambiarEstado not implemented")
}
func (*UnimplementedChatServiceServer) ConsultarFinanzas(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarFinanzas not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_OrdenarPyme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Orden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).OrdenarPyme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/OrdenarPyme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).OrdenarPyme(ctx, req.(*Orden))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_OrdenarRetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Orden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).OrdenarRetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/OrdenarRetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).OrdenarRetail(ctx, req.(*Orden))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RecibirPaquete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RecibirPaquete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/RecibirPaquete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RecibirPaquete(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SeguimientoPaquete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SeguimientoPaquete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SeguimientoPaquete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SeguimientoPaquete(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CambiarEstado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NuevoEstado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CambiarEstado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/CambiarEstado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CambiarEstado(ctx, req.(*NuevoEstado))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ConsultarFinanzas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ConsultarFinanzas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/ConsultarFinanzas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ConsultarFinanzas(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrdenarPyme",
			Handler:    _ChatService_OrdenarPyme_Handler,
		},
		{
			MethodName: "OrdenarRetail",
			Handler:    _ChatService_OrdenarRetail_Handler,
		},
		{
			MethodName: "RecibirPaquete",
			Handler:    _ChatService_RecibirPaquete_Handler,
		},
		{
			MethodName: "SeguimientoPaquete",
			Handler:    _ChatService_SeguimientoPaquete_Handler,
		},
		{
			MethodName: "CambiarEstado",
			Handler:    _ChatService_CambiarEstado_Handler,
		},
		{
			MethodName: "ConsultarFinanzas",
			Handler:    _ChatService_ConsultarFinanzas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
